Introduction to Indexes in MongoDB
====================================
In databases, an index is a data structure that improves the speed of data retrieval operations. Without indexes, a database must scan every document in a collection to find the matching records for a query, which can be very slow, especially with large datasets. An index allows MongoDB to quickly locate data without scanning every document, significantly improving query performance.

How Indexes Work in MongoDB
When you create an index in MongoDB, it builds a data structure (usually a B-tree) that stores references to the documents in the collection in a way that optimizes searching. Rather than scanning all documents sequentially, MongoDB can look up the index and use it to quickly find the documents that match the query. The index points to the location of the documents on disk, allowing for faster reads.

Indexes in MongoDB are created on fields in a collection, and MongoDB can use one or more indexes to fulfill a query. However, MongoDB is selective about which index it uses, choosing the most efficient one based on the query's structure and the indexes available.

Key Differences Between RDBMS and MongoDB Indexing
1. Data Model:
RDBMS: Uses a fixed schema with tables, rows, and columns. Indexes are typically created on specific columns of a table.
MongoDB: Is a NoSQL, document-based database. Data is stored in BSON format (binary JSON), which allows more flexibility in the schema. Collections of documents can have different fields and data types. Indexes in MongoDB are created on specific fields within these documents.
2. Schema Flexibility:
RDBMS: Requires a rigid, predefined schema for tables.
MongoDB: Allows schema-less design, meaning documents in the same collection can have different structures. This flexibility affects how indexes are used.
3. Index Types:
RDBMS: Common index types include B-tree indexes, hash indexes, and full-text indexes.
MongoDB: MongoDB supports a variety of index types, including single-field, compound, hashed, geospatial, text, and more.
4. Index Usage:
RDBMS: The query optimizer chooses the best index for each query based on the query structure and available indexes.
MongoDB: Similar to RDBMS, MongoDB also uses a query optimizer to choose the best index based on the query, but MongoDB's flexible schema can affect how and when indexes are applied.
5. Performance Considerations:
RDBMS: Indexes speed up read queries but can impact write operations (inserts, updates, deletes) since indexes need to be updated.
MongoDB: Indexes also speed up read operations in MongoDB but can affect write performance. MongoDB's background indexing and write concern settings help mitigate these impacts.
Types of MongoDB Indexes
MongoDB offers several types of indexes to optimize various kinds of queries. Let's go through each of them:

1. Single-Field Indexes
Description: This is the most basic type of index. It is created on a single field in the document.

Use Case: Used when you frequently query a specific field.

Example:Syntax:
db.collection.createIndex({ field1: 1 })
This creates an ascending index on field1. You can also create descending indexes by using -1 instead of 1.

Benefits: Simple to create and improve performance for queries that filter on one specific field.

2. Compound Indexes
Description: This index type is created on multiple fields in a collection. Compound indexes can optimize queries that filter on multiple fields at once.

Use Case: When you need to query using combinations of fields frequently.

Example:Syntax:
db.collection.createIndex({ field1: 1, field2: 1 })
This creates an index on both field1 and field2. Queries that filter on either or both fields will be optimized.

Benefits: Faster query performance for queries that involve multiple fields. The order of fields in the index matters because MongoDB uses the left-most prefix of the index.

3. Hashed Indexes
Description: A hashed index is useful when you need to perform an equality query on a field, but the field has high cardinality.

Use Case: Often used for sharded collections, where MongoDB needs a hashed value of a field to distribute data across different shards.

Example:Syntax:
db.collection.createIndex({ field1: "hashed" })
Benefits: Efficient for equality queries on high-cardinality fields (fields with many distinct values). Hash-based indexing is commonly used in sharding to distribute documents evenly across shards.

4. Geospatial Indexes
Description: These indexes are used for queries that involve geographical locations. MongoDB supports 2d indexes for flat, planar data and 2dsphere indexes for spherical (lat/lon) coordinates.

Use Case: To efficiently perform geospatial queries like finding nearby locations.

Example:Syntax:
db.collection.createIndex({ location: "2dsphere" })
Benefits: Supports geospatial queries for location-based filtering, such as proximity searches.

5. Text Indexes
Description: MongoDB provides a text index to support full-text search. This index type allows for searching text fields in documents based on words and phrases.

Use Case: When you need to search text fields for specific words or phrases.

Example:Syntax:
db.collection.createIndex({ description: "text" })
Benefits: Allows for full-text search capabilities, including stemming, text search with operators like $text, and support for multiple languages.

6. Wildcard Indexes
Description: Wildcard indexes allow you to index all fields within a document. This is useful when you don't know the exact fields that will be queried, especially with dynamic schema collections.

Use Case: When your collection contains varied and dynamic data (e.g., user-generated content) and you want to index multiple fields without explicitly listing them.

Example:Syntax:
db.collection.createIndex({ "$**": 1 })
Benefits: Provides flexibility when indexing collections with unpredictable or evolving schemas.

7. TTL (Time-To-Live) Indexes
Description: TTL indexes are a special type of index used to automatically delete documents after a specified period. This is commonly used for data like session logs or temporary data.

Use Case: Automatically deleting expired documents, such as session data or cache.

Example:Syntax:
db.collection.createIndex({ createdAt: 1 }, { expireAfterSeconds: 3600 })
This creates an index that expires documents 1 hour after the createdAt fieldâ€™s timestamp.

Benefits: Automatically manages data expiration without requiring manual intervention.

8. Partial Indexes
Description: A partial index is created with a filter, meaning it only indexes documents that meet a certain condition.

Use Case: When you only need to index a subset of documents that satisfy specific criteria.

Example:Syntax:
db.collection.createIndex({ status: 1 }, { partialFilterExpression: { status: { $eq: "active" } } })
Benefits: Saves space by only indexing documents that match a specified condition, improving performance when your queries are selective.

Conclusion
Indexes are an essential tool for improving query performance in MongoDB. The right index can significantly speed up data retrieval, but improper use of indexes or too many indexes can degrade performance, particularly for write operations. Choosing the right type of index depends on the nature of your queries and the structure of your data. By understanding the different types of indexes and when to use them, you can optimize your MongoDB application for both read and write performance.

Set of test cases based on the types of indexes, as well as a suggested index strategy for your specific use case with three fields that are used both individually and in combination.

Test Cases for Indexes in MongoDB
Test Case 1: Single-Field Index
Scenario: You have a collection where queries are frequently filtering by a single field, field1.

Test Setup:
Syntax:
// Creating a single-field index on field1
db.collection.createIndex({ field1: 1 })

Query:Syntax:
// Query filtering by field1
db.collection.find({ field1: "value1" })
Expected Result:

The query should be faster with the index on field1 because MongoDB can directly use the index to find documents matching field1: "value1" without scanning the entire collection.
Test Case 2: Compound Index
Scenario: You have a collection where queries frequently filter by both field1 and field2.

Test Setup:
Syntax:
// Creating a compound index on field1 and field2
db.collection.createIndex({ field1: 1, field2: 1 })

Query:Syntax:
// Query filtering by both field1 and field2
db.collection.find({ field1: "value1", field2: "value2" })

Expected Result:
The query should be faster with the compound index, as MongoDB will use the index to directly locate documents that match both field1: "value1" and field2: "value2".
Test Case 3: Hashed Index
Scenario: You have a collection where the field3 is used in equality queries, but it has a high cardinality (many distinct values). You decide to use a hashed index for field3.

Test Setup:
Syntax:
// Creating a hashed index on field3
db.collection.createIndex({ field3: "hashed" })

Query:Syntax:
// Query filtering by field3 with an equality check
db.collection.find({ field3: "value3" })

Expected Result:
The hashed index should efficiently handle the equality query for field3, allowing MongoDB to quickly find documents matching field3: "value3".
Test Case 4: Geospatial Index
Scenario: You have a collection of locations with latitude and longitude stored in location field, and you want to query for documents within a specific radius.

Test Setup:
Syntax:
// Creating a 2dsphere index on the location field for geospatial queries
db.collection.createIndex({ location: "2dsphere" })

Query:Syntax:
// Query for finding documents within a 5km radius from a point (latitude, longitude)
db.collection.find({
  location: {
    $nearSphere: {
      $geometry: { type: "Point", coordinates: [ -73.97, 40.77 ] },
      $maxDistance: 5000
    }
  }
})

Expected Result:
The geospatial query should be much faster with the 2dsphere index, enabling MongoDB to quickly find documents that are within the specified radius.
Test Case 5: Text Index
Scenario: You have a collection of blog posts with a content field that you want to search for specific words or phrases.

Test Setup:Syntax:
// Creating a text index on the content field
db.collection.createIndex({ content: "text" })

Query:Syntax:
// Query searching for documents containing the word "mongodb" in the content field
db.collection.find({ $text: { $search: "mongodb" } })

Expected Result:
The text search should return all documents containing the word "mongodb" in the content field, with the text index optimizing the search performance.
Suggested Index Strategy for Your Use Case
You mentioned that you have three fields in your application that are used both individually and in combinations. In this case, the goal is to optimize performance for both individual queries and queries that combine the three fields.

Hereâ€™s an approach to building indexes for this scenario:
1. Compound Index for Most Common Combination
If you frequently query using all three fields, say field1, field2, and field3, in combination, you can create a compound index that covers all of them. The order of fields in the compound index should reflect how frequently each field is used in combination:

If you often query like { field1: value1, field2: value2, field3: value3 }, you could create a compound index in this order:

Syntax:
db.collection.createIndex({ field1: 1, field2: 1, field3: 1 })
This will ensure MongoDB uses the index for queries that involve all three fields, significantly speeding up query execution.

2. Individual Indexes for Each Field
Since you also query each field individually, you should create single-field indexes for each field:

Syntax:
db.collection.createIndex({ field1: 1 })
db.collection.createIndex({ field2: 1 })
db.collection.createIndex({ field3: 1 })
These indexes will optimize queries like:

Syntax:
db.collection.find({ field1: "value1" })
db.collection.find({ field2: "value2" })
db.collection.find({ field3: "value3" })
3. Consider Query Patterns
If you often query a specific combination (e.g., field1 and field2 together), you might want to create an additional compound index for those fields.

Syntax:
db.collection.createIndex({ field1: 1, field2: 1 })
This will optimize queries that filter by field1 and field2 together.

4. Order of Fields in the Index
MongoDB uses the left-most prefix of a compound index, meaning that queries must match the left-most fields in the index to benefit from it. For instance, if your compound index is { field1: 1, field2: 1, field3: 1 }, MongoDB can use it for queries that involve field1, field1 + field2, or field1 + field2 + field3, but not for queries that involve only field2 or field3 by themselves.
Recommended Index Strategy
Compound index for the most frequent combination of fields:

Example: { field1: 1, field2: 1, field3: 1 }
Single-field indexes for each individual field:

Example: { field1: 1 }, { field2: 1 }, { field3: 1 }
Additional compound indexes for common two-field queries (if applicable):

Example: { field1: 1, field2: 1 }, { field2: 1, field3: 1 }
This approach ensures that your queriesâ€”whether they filter by one field, two fields, or all threeâ€”will be served efficiently by MongoDB's index system.

Conclusion
Compound Index: Best for queries that combine multiple fields (in your case, all three fields).
Single-Field Indexes: Ensure fast queries when filtering by just one field.
Indexing Strategy: The optimal strategy will depend on your query patterns and how often you query specific combinations of fields.
By combining compound and single-field indexes appropriately, you can achieve significant performance improvements for both individual and combined queries in your application.

Refrence :
https://www.mongodb.com/resources/basics/databases/database-index 
