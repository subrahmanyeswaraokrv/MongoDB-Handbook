openssl genrsa -out mongoCA.key -aes256 8192
t0uc@npayment$

I

mplementing SSL/TLS for your existing MongoDB 8.0 replica set on Ubuntu 22 with self-signed certificates involves several steps. Below, I'll guide you through the process step-by-step. Please ensure that you have a backup of your current setup before proceeding.

Prerequisites:
MongoDB replica set running without SSL/TLS.
OpenSSL installed on your system (for generating the certificates).
A basic understanding of working with MongoDB configuration files and commands.
Step 1: Generate Self-Signed Certificates
For each node in your replica set, you'll need to generate a self-signed certificate. Here’s how you can generate the certificates using OpenSSL:

1.1. Create a Directory to Store the Certificates
bash
Copy
mkdir -p /etc/ssl/mongodb
cd /etc/ssl/mongodb
1.2. Generate the Private Key and Certificate for Each Node
For each node, you'll need to generate a private key and a self-signed certificate. Let’s generate these for the first node.

Generate Private Key:
70Uc@npayMen7$
bash
Copy
openssl genpkey -algorithm RSA -out mongodb-node1.key -aes256
chmod 600 mongodb-node1.key
Generate Self-Signed Certificate:

bash
Copy
openssl req -new -x509 -key mongodb-node1.key -out mongodb-node1.crt -days 3650
During the certificate creation, you’ll be prompted for various details such as country, organization, and Common Name (CN). The CN should be the hostname of the node (e.g., mongodb-node1.example.com).
root@dev-mongodb-poc1:/etc/ssl/mongodb#
root@dev-mongodb-poc1:/etc/ssl/mongodb# chmod 600 mongodb-node1.key
root@dev-mongodb-poc1:/etc/ssl/mongodb# openssl req -new -x509 -key mongodb-node1.key -out mongodb-node1.crt -days 3650
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            7f:7e:ac:84:4e:d0:e7:49:0d:0a:c2:df:67:fe:33:bc:d9:39:99:2a
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: C = US, ST = New Jersey, L = Jersey City, O = Toucan Payments, OU = IT Department, CN = dev-mongodb-poc1
        Validity
            Not Before: Feb  3 07:42:50 2025 GMT
            Not After : Feb  1 07:42:50 2035 GMT
        Subject: C = US, ST = New Jersey, L = Jersey City, O = Toucan Payments, OU = IT Department, CN = dev-mongodb-poc1
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:c4:e9:05:df:78:b5:b8:fc:f4:7f:bc:36:0c:d1:
                    ec:47:bd:88:f0:5a:c8:d7:c8:1e:84:1f:f1:8d:cf:
                    73:7e:ba:bf:a9:7f:c8:2b:75:ed:53:79:1c:11:2f:
                    36:22:3b:13:99:81:62:1a:38:a5:b9:c3:e2:7c:db:
                    cd:35:e5:6c:69:e5:2a:25:51:3e:5c:59:90:14:7b:
                    b3:1c:d7:69:81:05:fe:fc:71:49:a2:15:cd:74:3b:
                    1a:57:2f:3d:7e:8e:4a:6f:2b:bf:cb:67:17:c0:7f:
                    db:5d:c2:0b:19:8e:aa:2f:bb:7a:52:5e:dc:c6:d0:
                    29:d4:32:07:d0:ee:a0:3a:52:c1:94:0c:a4:39:a2:
                    4b:c7:15:29:41:17:5c:30:73:19:f2:d0:95:09:63:
                    0b:8e:37:14:bf:97:b6:08:cf:05:80:68:77:92:03:
                    23:4a:3e:5f:44:f0:32:23:f2:fc:96:a5:ea:93:dd:
                    1e:3c:78:ec:79:a5:7b:0a:bc:e2:46:3c:78:7a:1a:
                    19:aa:24:9f:29:f6:77:cf:20:df:6e:44:fe:72:4b:
                    5a:8b:a9:0f:7e:41:3e:19:42:fe:5d:aa:f0:b5:a9:
                    eb:a3:41:a5:0b:e1:21:02:49:a6:3e:a4:c1:db:4f:
                    83:ad:54:3e:d7:63:4c:fb:bf:fe:32:0f:e6:97:20:
                    94:33
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier:
                7F:4A:E7:74:B5:08:6E:D6:75:A6:DD:98:90:08:3D:77:B7:0B:85:12
            X509v3 Authority Key Identifier:
                7F:4A:E7:74:B5:08:6E:D6:75:A6:DD:98:90:08:3D:77:B7:0B:85:12
            X509v3 Basic Constraints: critical
                CA:TRUE
    Signature Algorithm: sha256WithRSAEncryption
    Signature Value:
        37:ac:2a:c1:56:64:4b:eb:63:48:3d:1e:91:95:19:e2:ef:4d:
        20:5c:d4:dc:4e:13:44:14:68:ab:38:62:e4:8d:ab:2c:12:7c:
        d6:11:64:91:43:a6:ae:25:09:97:50:2d:11:d3:ee:4e:0e:dc:
        86:34:98:d7:ed:85:a9:42:4a:bf:6c:f1:37:b3:48:5e:2c:c8:
        dd:99:b2:ed:c4:8a:45:46:83:f4:6e:a9:6f:2d:56:c3:0a:e2:
        14:14:a1:be:36:0c:7f:7a:1d:fc:0d:99:4d:60:16:db:b1:ac:
        5d:d3:e4:93:ca:86:1d:a0:3f:f8:d1:f8:f6:6c:92:3e:ec:16:
        92:a7:af:a9:da:30:15:30:16:3c:ef:68:1c:2f:c5:d0:f1:8a:
        e6:95:bd:4f:b6:16:cf:22:75:eb:66:cc:ff:93:76:ba:74:c0:
        50:ea:f7:76:b2:c2:09:fb:83:a2:b0:0f:58:4e:13:3a:fb:62:
        70:19:3e:5d:f9:51:ce:2b:73:8a:63:16:3d:87:7d:b4:48:33:
        f2:ed:83:69:37:8d:a0:b4:b9:dd:dc:35:8f:91:7f:c1:de:58:
        23:d9:c3:e8:79:b5:9b:cf:15:e9:c6:46:0e:34:9b:1b:a2:05:
        28:70:d3:d7:ba:c1:c5:26:2d:bf:67:50:0d:dd:c1:1b:5c:1f:
        2e:af:9c:50
root@dev-mongodb-poc1:/etc/ssl/mongodb#



1.3. Repeat for All Other Nodes
Repeat the same process for the other nodes in your replica set, using different names for the files (e.g., mongodb-node2.key, mongodb-node2.crt, etc.) and the appropriate CN (hostnames) for each node.

Step 2: Configure MongoDB for SSL/TLS
Now that you have generated the certificates for each node, the next step is to configure MongoDB to use SSL/TLS.

2.1. Edit MongoDB Configuration File (mongod.conf)
Open the MongoDB configuration file for each node in the replica set. It is typically located in /etc/mongod.conf.

bash
Copy
sudo nano /etc/mongod.conf
Add or modify the following lines under the net section to enable SSL/TLS:

yaml
Copy
net:
  ssl:
    mode: requireSSL           # Ensure all connections use SSL/TLS
    PEMKeyFile: /etc/ssl/mongodb/mongodb-node1.key
    PEMCertFile: /etc/ssl/mongodb/mongodb-node1.crt
    CAFile: /etc/ssl/mongodb/mongodb-node1.crt  # Optional, if you want to enforce certificate validation
  port: 27017
Ensure to replace the PEMKeyFile and PEMCertFile paths with the actual paths to the generated private key and certificate for each node.

2.2. Configure the Replica Set for SSL/TLS
Since this is a replica set, you’ll also need to configure the replica set to communicate over SSL/TLS. Under the replication section, you might want to ensure that the ssl option is correctly set up for each member. Example:

yaml
Copy
replication:
  replSetName: rs0   # Use the same replica set name as configured
For each node in the replica set, ensure that the ssl option is added with the appropriate PEM key and certificate files.

Step 3: Restart MongoDB Nodes
Once you've updated the mongod.conf files for all nodes in the replica set, restart each node for the changes to take effect.

3.1. Restart MongoDB on Node 1
bash
Copy
sudo systemctl restart mongod
3.2. Repeat for Other Nodes
Make sure to restart all the nodes in the replica set in the same manner. It's important that all nodes are restarted after the SSL/TLS configuration is applied.

Step 4: Verify SSL/TLS Connection
To verify that SSL/TLS is working correctly, you can use mongo shell or a client to connect to the replica set with SSL enabled.

4.1. Connect Using Mongo Shell
Use the following command to connect to one of the nodes using SSL:

bash
Copy
mongo --host mongodb-node1.example.com --ssl --sslCAFile /etc/ssl/mongodb/mongodb-node1.crt --sslPEMKeyFile /etc/ssl/mongodb/mongodb-node1.key --sslAllowInvalidCertificates
The --sslAllowInvalidCertificates option can be used to ignore certificate verification issues (only recommended for testing or development).

4.2. Check Replica Set Status
To check the status of the replica set and confirm that all members are connected via SSL/TLS, run:

bash
Copy
rs.status()
You should see that all nodes are listed and that the status is healthy.

Step 5: Update MongoDB Clients to Use SSL/TLS
Now that your MongoDB replica set is running with SSL/TLS, you need to ensure that all your MongoDB clients are configured to connect using SSL.

5.1. Example Connection String for SSL:
bash
Copy
mongodb://<username>:<password>@mongodb-node1.example.com:27017,mongodb-node2.example.com:27017,mongodb-node3.example.com:27017/?replicaSet=rs0&ssl=true
This connection string ensures that the client connects over SSL/TLS to the replica set.

Step 6: Test Communication Between Replica Set Members
To make sure everything is working correctly, you can check the connection between the nodes in your replica set by using:

bash
Copy
rs.status()
This will help you ensure that all members are communicating correctly over SSL/TLS.

Step 7: Enforce SSL on MongoDB Clients (Optional)
If you want to enforce that all clients must use SSL, you can configure the requireSSL mode on MongoDB as shown earlier. This ensures that all connections to the MongoDB replica set are encrypted.

Summary:
Generate self-signed certificates for each MongoDB node.
Configure the MongoDB nodes to use SSL/TLS by modifying the mongod.conf files.
Restart the MongoDB service for all nodes.
Verify the SSL connection using mongo shell.
Update your clients to connect using SSL.