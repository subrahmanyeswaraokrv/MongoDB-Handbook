**MongoDB TLS Replica Set Setup Guide with Troubleshooting**

---

### üìÖ Overview
This guide outlines how to configure a MongoDB 8 replica set with TLS enabled, including how to replace an expired certificate with a new PEM file, rebuild the proper PEM structure, and roll out the changes to all nodes.

Replica Set: `mongopoc_rs0`
Nodes:
- Primary: `192.xxx.xx.01`
- Secondary: `192.xxx.xx.02`
- Secondary: `192.xxx.xx.03`

---

### üîê Step 1: Create a New Full PEM File from Key + Certificate + CA

Assume you have:
- `private.key` (your private key)
- `cert.crt` (your new server certificate)
- `ca.crt` (CA certificate chain)

#### üõ† Combine them into one PEM file:
```bash
cat private.key cert.crt ca.crt > myfile-full.pem
```

#### üì¶ Move to MongoDB path:
```bash
sudo mkdir -p /etc/mongo/ssl
sudo mv myfile-full.pem /etc/mongo/ssl/
sudo mv ca.crt /etc/mongo/ssl/
sudo chown mongodb:mongodb /etc/mongo/ssl/*.pem /etc/mongo/ssl/*.crt
sudo chmod 600 /etc/mongo/ssl/myfile-full.pem
sudo chmod 644 /etc/mongo/ssl/ca.crt
```

---

### üîÅ Step 2: Update PEM File on All Nodes
Copy `myfile-full.pem` and `ca.crt` from the working node (`.135`) to the other two (`.137` and `.138`):
```bash
scp /etc/mongo/ssl/* user@192.xxx.xx.02:/etc/mongo/ssl/
scp /etc/mongo/ssl/* user@192.xxx.xx.03:/etc/mongo/ssl/
```

Then on `.137` and `.138`:
```bash
sudo chown mongodb:mongodb /etc/mongo/ssl/*.pem /etc/mongo/ssl/*.crt
sudo chmod 600 /etc/mongo/ssl/myfile-full.pem
sudo chmod 644 /etc/mongo/ssl/ca.crt
```

---

### üßæ Step 3: Verify and Update `mongod.conf`

Ensure the following TLS config exists on all nodes (`/mongo/mongod.conf`):
```yaml
net:
  port: 27017
  bindIp: 127.0.0.1,<node_ip>
  tls:
    mode: requireTLS
    certificateKeyFile: /etc/mongo/ssl/myfile-full.pem
    CAFile: /etc/mongo/ssl/ca.crt
    allowInvalidHostnames: true
    allowInvalidCertificates: true

replication:
  replSetName: mongopoc_rs0
```

---

### üîÑ Step 4: Restart MongoDB on All Nodes
```bash
sudo systemctl restart mongod
sudo systemctl status mongod
```

Check logs if errors occur:
```bash
sudo tail -30 /mongo/logs/mongod.log
```

---

### üß™ Step 5: Validate TLS and Replica Set Connection

Connect securely with:
```bash
mongosh --host 192.xxx.xx.01 \
--tls --tlsCertificateKeyFile /etc/mongo/ssl/myfile-full.pem \
--tlsCAFile /etc/mongo/ssl/ca.crt \
-u superAdmin -p --tlsAllowInvalidCertificates
```

Then test:
```js
rs.status()
```

You should see `.137` and `.138` joined successfully.

---

### ‚ö†Ô∏è Troubleshooting

| Issue | Solution |
|-------|----------|
| **EACCES** | Use correct `chown`/`chmod`, run `mongosh` with `sudo` or give cert access to your user. |
| **bad end line** | PEM file blocks (`END`/`BEGIN`) must be on separate lines. Fix with text editor or `dos2unix`. |
| **TLS handshake fails** | Use `openssl s_client -connect <ip>:27017 -tls1_2` to check cert. |
| **Secondary nodes fail to join** | Check `bindIp`, file access, and if the replica set sees them in `rs.status()` |

---

### üß† System Tuning (Recommended)
```bash
echo "vm.max_map_count=128000" | sudo tee -a /etc/sysctl.conf
echo "vm.swappiness=0" | sudo tee -a /etc/sysctl.conf
sudo sysctl -p
```

---

### ‚úÖ Final Notes
- Confirm PEM file has: `PRIVATE KEY` + `CERTIFICATE` + `CA`
- Restart MongoDB on **all** nodes after cert updates
- Validate with `mongosh` or `rs.status()`

For advanced scripting or rolling cert automation across replica sets, feel free to reach out!

