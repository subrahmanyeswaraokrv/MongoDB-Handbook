Step-by-Step Guide to Implement MongoDB Sharding on CentOS
1. Install MongoDB on CentOS
If you haven’t already installed MongoDB, follow these steps to install it on your CentOS machine.

Step 1: Add MongoDB Repository
First, create a /etc/yum.repos.d/mongodb-org-5.0.repo file with the following content (for MongoDB 5.0):

bash
Copy
Edit
[mongodb-org-5.0]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/amazon/2/mongodb-org/5.0/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-5.0.asc
Step 2: Install MongoDB
bash
Copy
Edit
sudo yum install -y mongodb-org
Step 3: Start and Enable MongoDB Service
bash
Copy
Edit
sudo systemctl start mongod
sudo systemctl enable mongod
2. Set Up Config Servers (Metadata Servers)
Config servers store the metadata for the sharded cluster. For production, use at least 3 config servers for redundancy and high availability.

Step 1: Configure and Start Config Servers
On each config server, create the appropriate directory for the database storage (e.g., /data/configdb).

Edit the mongod.conf file (usually located in /etc/mongod.conf) to specify the configsvr and replSet options:

yaml
Copy
Edit
# mongod.conf

storage:
  dbPath: /data/configdb

sharding:
  clusterRole: configsvr

replication:
  replSetName: configReplSet
Start MongoDB as a config server:

bash
Copy
Edit
mongod --configsvr --replSet configReplSet --dbpath /data/configdb --port 27019
Repeat this for each config server. You’ll need at least 3 config servers for redundancy.

Step 2: Initialize the Config Server Replica Set
On one of the config servers, initiate the replica set:

bash
Copy
Edit
mongo --host <config-server1> --port 27019
rs.initiate()
Then, add the other config servers to the replica set:

bash
Copy
Edit
rs.add("<config-server2>:27019")
rs.add("<config-server3>:27019")
3. Set Up Shard Servers
Shard servers store the actual data. These should also be replica sets for high availability.

Step 1: Configure Shard Servers
Each shard will be a replica set. Configure mongod.conf on each shard:

yaml
Copy
Edit
# mongod.conf

sharding:
  clusterRole: shardsvr

replication:
  replSetName: shardReplSet
Step 2: Start Shard Servers
Start MongoDB on each shard server:

bash
Copy
Edit
mongod --shardsvr --replSet shardReplSet --dbpath /data/sharddb --port 27018
4. Set Up Mongos Router
The mongos router directs queries to the appropriate shard. It sits between your application and the sharded cluster. Install mongos on your application servers or a dedicated router server.

Step 1: Start Mongos Router
bash
Copy
Edit
mongos --configdb configReplSet/<config-server1>:27019,<config-server2>:27019,<config-server3>:27019 --port 27017
Now, you can point your application to the mongos router (on port 27017).

5. Enable Sharding on the Database
Once your sharded cluster is set up, enable sharding on the database. Use the mongos router to issue this command:

bash
Copy
Edit
mongo --host <mongos-router> --port 27017
Then enable sharding on your database:

js
Copy
Edit
sh.enableSharding("your_database_name")
6. Choose a Shard Key
Now, you need to choose a shard key for your collection. This is the field MongoDB will use to partition your data across shards.

For example, if your collection is users, and you're sharding by user_id:

js
Copy
Edit
db.users.createIndex({ user_id: 1 })
sh.shardCollection("your_database_name.users", { "user_id": 1 })
You can choose either a hashed or range shard key depending on your use case.

7. Migrate Data and Monitor the Sharded Cluster
Once sharding is enabled, MongoDB automatically starts migrating chunks of data across the shards. During this migration:

Your application can continue reading and writing to the database.
Data migration happens in the background with minimal impact on performance.
Monitor migration progress using sh.status().
Step 1: Monitor Sharding Status
js
Copy
Edit
sh.status()
Step 2: Monitor Shard Balancer
You can monitor the sharding balancer using:

bash
Copy
Edit
mongos> sh.getBalancerState()
You can also disable or enable the balancer if needed:

bash
Copy
Edit
sh.stopBalancer()
sh.startBalancer()
8. Scaling the Cluster (Adding More Shards)
As your data grows, you can add more shards to your cluster. To add a new shard, follow these steps:

Step 1: Add New Shard Server
On your new shard server, start MongoDB as part of a replica set:

bash
Copy
Edit
mongod --shardsvr --replSet newShardReplSet --dbpath /data/newshard --port 27018
Step 2: Add Shard to Cluster
Connect to the mongos router and add the new shard:

bash
Copy
Edit
mongo --host <mongos-router> --port 27017
sh.addShard("newShardReplSet/<new-shard-server>:27018")
9. Backups and Maintenance
Backups: Always back up your data before making significant changes. MongoDB supports both logical and physical backups.
Monitor Performance: As your sharded cluster grows, ensure you monitor the cluster’s performance, particularly how data is distributed among shards.
Use mongostat and mongotop to monitor performance:

bash
Copy
Edit
mongostat --host <mongos-router> --port 27017
mongotop --host <mongos-router> --port 27017
10. MongoDB Sharding Best Practices
Avoid Hotspots: Carefully choose a shard key to ensure an even distribution of data across shards.
Use Replica Sets: Always use replica sets for shards to ensure high availability and data redundancy.
Monitor Cluster Health: Use mongos, mongostat, and mongotop for ongoing monitoring.
Conclusion
This guide walks you through setting up MongoDB sharding on CentOS with minimal downtime. The process involves setting up config servers, shard servers, and mongos routers, and then enabling sharding on your collections. During data migration, MongoDB handles the background tasks while your application continues to operate.
